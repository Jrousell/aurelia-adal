"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = undefined && undefined.__metadata || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, Promise, generator) {
    return new Promise(function (resolve, reject) {
        generator = generator.call(thisArg, _arguments);
        function cast(value) {
            return value instanceof Promise && value.constructor === Promise ? value : new Promise(function (resolve) {
                resolve(value);
            });
        }
        function onfulfill(value) {
            try {
                step("next", value);
            } catch (e) {
                reject(e);
            }
        }
        function onreject(value) {
            try {
                step("throw", value);
            } catch (e) {
                reject(e);
            }
        }
        function step(verb, value) {
            var result = generator[verb](value);
            result.done ? resolve(result.value) : cast(result.value).then(onfulfill, onreject);
        }
        step("next", void 0);
    });
};
define(["require", "exports", 'aurelia-framework', 'adal'], function (require, exports, aurelia_framework_1, Adal) {
    var AureliaAdal = (function () {
        function AureliaAdal(adalConstructor) {
            _classCallCheck(this, AureliaAdal);

            this.adalConstructor = adalConstructor;
            this.oauthData = {
                isAuthenticated: false,
                userName: '',
                loginError: '',
                profile: null
            };
        }

        _createClass(AureliaAdal, [{
            key: "configure",
            value: function configure(config) {
                var _this = this;

                try {
                    var configOptions = {};
                    configOptions.tenant = config.tenant;
                    configOptions.clientId = config.clientId;
                    configOptions.endpoints = config.endpoints;
                    var existingHash = window.location.hash;
                    var pathDefault = window.location.href;
                    if (existingHash) {
                        pathDefault = pathDefault.replace(existingHash, '');
                    }
                    configOptions.redirectUri = configOptions.redirectUri || pathDefault;
                    configOptions.postLogoutRedirectUri = configOptions.postLogoutRedirectUri || pathDefault;
                    this.adal = this.adalConstructor.inject(configOptions);
                    window.AuthenticationContext = function () {
                        return _this.adal;
                    };
                    this.updateDataFromCache(this.adal.config.loginResource);
                } catch (e) {
                    console.log(e);
                }
            }
        }, {
            key: "updateDataFromCache",
            value: function updateDataFromCache(resource) {
                var token = this.adal.getCachedToken(resource);
                this.oauthData.isAuthenticated = token !== null && token.length > 0;
                var user = this.adal.getCachedUser() || { userName: '', profile: null };
                this.oauthData.userName = user.userName;
                this.oauthData.profile = user.profile;
                this.oauthData.loginError = this.adal.getLoginError();
            }
        }, {
            key: "hashHandler",
            value: function hashHandler(hash, redirectHandler, isNotCallbackHandler, nextHandler) {
                if (this.adal.isCallback(hash)) {
                    var requestInfo = this.adal.getRequestInfo(hash);
                    this.adal.saveTokenFromHash(requestInfo);
                    if (requestInfo.requestType !== this.adal.REQUEST_TYPE.LOGIN) {
                        this.adal.callback = window.parent.AuthenticationContext().callback;
                        if (requestInfo.requestType === this.adal.REQUEST_TYPE.RENEW_TOKEN) {
                            this.adal.callback = window.parent.callBackMappedToRenewStates[requestInfo.stateResponse];
                        }
                    }
                    if (requestInfo.stateMatch) {
                        if (typeof this.adal.callback === 'function') {
                            if (requestInfo.requestType === this.adal.REQUEST_TYPE.RENEW_TOKEN) {
                                if (requestInfo.parameters['access_token']) {
                                    this.adal.callback(this.adal._getItem(this.adal.CONSTANTS.STORAGE.ERROR_DESCRIPTION), requestInfo.parameters['access_token']);
                                    return nextHandler();
                                } else if (requestInfo.parameters['id_token']) {
                                    this.adal.callback(this.adal._getItem(this.adal.CONSTANTS.STORAGE.ERROR_DESCRIPTION), requestInfo.parameters['id_token']);
                                    return nextHandler();
                                }
                            }
                        } else {
                            this.updateDataFromCache(this.adal.config.loginResource);
                            if (this.oauthData.userName) {
                                var _self = this;
                                _self.updateDataFromCache(_self.adal.config.loginResource);
                                var loginStartPage = _self.adal._getItem(_self.adal.CONSTANTS.STORAGE.START_PAGE);
                                if (loginStartPage) {
                                    return redirectHandler(loginStartPage);
                                }
                            } else {}
                        }
                    }
                } else {
                    return isNotCallbackHandler();
                }
            }
        }, {
            key: "loginHandler",
            value: function loginHandler(path, redirectHandler, handler) {
                this.adal.info('Login event for:' + path);
                if (this.adal.config && this.adal.config.localLoginUrl) {
                    return redirectHandler(this.adal.config.localLoginUrl);
                } else {
                    this.adal._saveItem(this.adal.CONSTANTS.STORAGE.START_PAGE, path);
                    this.adal.info('Start login at:' + window.location.href);
                    this.adal.login();
                    return handler();
                }
            }
        }, {
            key: "config",
            value: function config() {
                return this.adal.config;
            }
        }, {
            key: "login",
            value: function login() {
                this.adal.login();
            }
        }, {
            key: "loginInProgress",
            value: function loginInProgress() {
                return this.adal.loginInProgress();
            }
        }, {
            key: "logOut",
            value: function logOut() {
                this.adal.logOut();
            }
        }, {
            key: "getCachedToken",
            value: function getCachedToken(resource) {
                return this.adal.getCachedToken(resource);
            }
        }, {
            key: "getUserInfo",
            value: function getUserInfo() {
                return this.oauthData;
            }
        }, {
            key: "acquireToken",
            value: function acquireToken(resource) {
                var _this2 = this;

                return new Promise(function (resolve, reject) {
                    _this2.adal.acquireToken(resource, function (error, tokenOut) {
                        if (error) {
                            reject(error);
                        } else {
                            resolve(tokenOut);
                        }
                    });
                });
            }
        }, {
            key: "getUser",
            value: function getUser() {
                return __awaiter(this, void 0, Promise, regeneratorRuntime.mark(function callee$3$0() {
                    return regeneratorRuntime.wrap(function callee$3$0$(context$4$0) {
                        var _this3 = this;

                        while (1) switch (context$4$0.prev = context$4$0.next) {
                            case 0:
                                context$4$0.next = 2;
                                return new Promise(function (resolve, reject) {
                                    _this3.adal.getUser(function (error, user) {
                                        if (error) {
                                            reject(error);
                                        } else {
                                            resolve(user);
                                        }
                                    });
                                });

                            case 2:
                                return context$4$0.abrupt("return", context$4$0.sent);

                            case 3:
                            case "end":
                                return context$4$0.stop();
                        }
                    }, callee$3$0, this);
                }));
            }
        }, {
            key: "getResourceForEndpoint",
            value: function getResourceForEndpoint(endpoint) {
                return this.adal.getResourceForEndpoint(endpoint);
            }
        }, {
            key: "clearCache",
            value: function clearCache() {
                this.adal.clearCache();
            }
        }, {
            key: "clearCacheForResource",
            value: function clearCacheForResource(resource) {
                this.adal.clearCacheForResource(resource);
            }
        }, {
            key: "info",
            value: function info(message) {
                this.adal.info(message);
            }
        }, {
            key: "verbose",
            value: function verbose(message) {
                this.adal.verbose(message);
            }
        }, {
            key: "isAuthenticated",
            value: function isAuthenticated() {
                return this.oauthData.isAuthenticated;
            }
        }]);

        return AureliaAdal;
    })();
    AureliaAdal = __decorate([aurelia_framework_1.inject(Adal), __metadata('design:paramtypes', [Object])], AureliaAdal);
    exports.AureliaAdal = AureliaAdal;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1cmVsaWEtYWRhbC5qcyIsImF1cmVsaWEtYWRhbC50cyJdLCJuYW1lcyI6WyJBdXJlbGlhQWRhbCIsIkF1cmVsaWFBZGFsLmNvbnN0cnVjdG9yIiwiQXVyZWxpYUFkYWwuY29uZmlndXJlIiwiQXVyZWxpYUFkYWwudXBkYXRlRGF0YUZyb21DYWNoZSIsIkF1cmVsaWFBZGFsLmhhc2hIYW5kbGVyIiwiQXVyZWxpYUFkYWwubG9naW5IYW5kbGVyIiwiQXVyZWxpYUFkYWwuY29uZmlnIiwiQXVyZWxpYUFkYWwubG9naW4iLCJBdXJlbGlhQWRhbC5sb2dpbkluUHJvZ3Jlc3MiLCJBdXJlbGlhQWRhbC5sb2dPdXQiLCJBdXJlbGlhQWRhbC5nZXRDYWNoZWRUb2tlbiIsIkF1cmVsaWFBZGFsLmdldFVzZXJJbmZvIiwiQXVyZWxpYUFkYWwuYWNxdWlyZVRva2VuIiwiQXVyZWxpYUFkYWwuZ2V0VXNlciIsIkF1cmVsaWFBZGFsLmdldFJlc291cmNlRm9yRW5kcG9pbnQiLCJBdXJlbGlhQWRhbC5jbGVhckNhY2hlIiwiQXVyZWxpYUFkYWwuY2xlYXJDYWNoZUZvclJlc291cmNlIiwiQXVyZWxpYUFkYWwuaW5mbyIsIkF1cmVsaWFBZGFsLnZlcmJvc2UiLCJBdXJlbGlhQWRhbC5pc0F1dGhlbnRpY2F0ZWQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUksVUFBVSxHQUFHLEFBQUMsYUFBUSxVQUFLLFVBQVUsSUFBSyxVQUFVLFVBQVUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRTtBQUNuRixRQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTTtRQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sR0FBRyxJQUFJLEtBQUssSUFBSSxHQUFHLElBQUksR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUk7UUFBRSxDQUFDLENBQUM7QUFDN0gsUUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLElBQUksT0FBTyxPQUFPLENBQUMsUUFBUSxLQUFLLFVBQVUsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxLQUMxSCxLQUFLLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQSxJQUFLLENBQUMsQ0FBQztBQUNsSixXQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDakUsQ0FBQztBQUNGLElBQUksVUFBVSxHQUFHLEFBQUMsYUFBUSxVQUFLLFVBQVUsSUFBSyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7QUFDMUQsUUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLElBQUksT0FBTyxPQUFPLENBQUMsUUFBUSxLQUFLLFVBQVUsRUFBRSxPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQzVHLENBQUM7QUFDRixJQUFJLFNBQVMsR0FBRyxBQUFDLGFBQVEsVUFBSyxTQUFTLElBQUssVUFBVSxPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUU7QUFDM0YsV0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFVLE9BQU8sRUFBRSxNQUFNLEVBQUU7QUFDMUMsaUJBQVMsR0FB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Q0FBQyxtQkFBQSxDQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsRURtTEwsVUFBVSxDQUFDLG1CQUFtQixFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FDNUMsRUFBRSxXQUFXLENBQUMsQ0NjbEI7QUFqTVksV0FBQSxDQUFBLFdBQVcsR0FBQSxXQWlNdkIsQ0FBQTtDRFpBLENBQUMsQ0FBQyIsImZpbGUiOiJhdXJlbGlhLWFkYWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XG59O1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUHJvbWlzZSwgZ2VuZXJhdG9yKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmNhbGwodGhpc0FyZywgX2FyZ3VtZW50cyk7XG4gICAgICAgIGZ1bmN0aW9uIGNhc3QodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gUHJvbWlzZSA/IHZhbHVlIDogbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgICAgIGZ1bmN0aW9uIG9uZnVsZmlsbCh2YWx1ZSkgeyB0cnkgeyBzdGVwKFwibmV4dFwiLCB2YWx1ZSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gb25yZWplY3QodmFsdWUpIHsgdHJ5IHsgc3RlcChcInRocm93XCIsIHZhbHVlKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHZlcmIsIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZ2VuZXJhdG9yW3ZlcmJdKHZhbHVlKTtcbiAgICAgICAgICAgIHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogY2FzdChyZXN1bHQudmFsdWUpLnRoZW4ob25mdWxmaWxsLCBvbnJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RlcChcIm5leHRcIiwgdm9pZCAwKTtcbiAgICB9KTtcbn07XG5kZWZpbmUoW1wicmVxdWlyZVwiLCBcImV4cG9ydHNcIiwgJ2F1cmVsaWEtZnJhbWV3b3JrJywgJ2FkYWwnXSwgZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMsIGF1cmVsaWFfZnJhbWV3b3JrXzEsIEFkYWwpIHtcbiAgICBsZXQgQXVyZWxpYUFkYWwgPSBjbGFzcyB7XG4gICAgICAgIGNvbnN0cnVjdG9yKGFkYWxDb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgdGhpcy5hZGFsQ29uc3RydWN0b3IgPSBhZGFsQ29uc3RydWN0b3I7XG4gICAgICAgICAgICB0aGlzLm9hdXRoRGF0YSA9IHtcbiAgICAgICAgICAgICAgICBpc0F1dGhlbnRpY2F0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHVzZXJOYW1lOiAnJyxcbiAgICAgICAgICAgICAgICBsb2dpbkVycm9yOiAnJyxcbiAgICAgICAgICAgICAgICBwcm9maWxlOiBudWxsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbmZpZ3VyZShjb25maWcpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbmZpZ09wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgICAgICBjb25maWdPcHRpb25zLnRlbmFudCA9IGNvbmZpZy50ZW5hbnQ7XG4gICAgICAgICAgICAgICAgY29uZmlnT3B0aW9ucy5jbGllbnRJZCA9IGNvbmZpZy5jbGllbnRJZDtcbiAgICAgICAgICAgICAgICBjb25maWdPcHRpb25zLmVuZHBvaW50cyA9IGNvbmZpZy5lbmRwb2ludHM7XG4gICAgICAgICAgICAgICAgbGV0IGV4aXN0aW5nSGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuICAgICAgICAgICAgICAgIGxldCBwYXRoRGVmYXVsdCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ0hhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aERlZmF1bHQgPSBwYXRoRGVmYXVsdC5yZXBsYWNlKGV4aXN0aW5nSGFzaCwgJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25maWdPcHRpb25zLnJlZGlyZWN0VXJpID0gY29uZmlnT3B0aW9ucy5yZWRpcmVjdFVyaSB8fCBwYXRoRGVmYXVsdDtcbiAgICAgICAgICAgICAgICBjb25maWdPcHRpb25zLnBvc3RMb2dvdXRSZWRpcmVjdFVyaSA9IGNvbmZpZ09wdGlvbnMucG9zdExvZ291dFJlZGlyZWN0VXJpIHx8IHBhdGhEZWZhdWx0O1xuICAgICAgICAgICAgICAgIHRoaXMuYWRhbCA9IHRoaXMuYWRhbENvbnN0cnVjdG9yLmluamVjdChjb25maWdPcHRpb25zKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuQXV0aGVudGljYXRpb25Db250ZXh0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hZGFsO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVEYXRhRnJvbUNhY2hlKHRoaXMuYWRhbC5jb25maWcubG9naW5SZXNvdXJjZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZURhdGFGcm9tQ2FjaGUocmVzb3VyY2UpIHtcbiAgICAgICAgICAgIHZhciB0b2tlbiA9IHRoaXMuYWRhbC5nZXRDYWNoZWRUb2tlbihyZXNvdXJjZSk7XG4gICAgICAgICAgICB0aGlzLm9hdXRoRGF0YS5pc0F1dGhlbnRpY2F0ZWQgPSB0b2tlbiAhPT0gbnVsbCAmJiB0b2tlbi5sZW5ndGggPiAwO1xuICAgICAgICAgICAgdmFyIHVzZXIgPSB0aGlzLmFkYWwuZ2V0Q2FjaGVkVXNlcigpIHx8IHsgdXNlck5hbWU6ICcnLCBwcm9maWxlOiBudWxsIH07XG4gICAgICAgICAgICB0aGlzLm9hdXRoRGF0YS51c2VyTmFtZSA9IHVzZXIudXNlck5hbWU7XG4gICAgICAgICAgICB0aGlzLm9hdXRoRGF0YS5wcm9maWxlID0gdXNlci5wcm9maWxlO1xuICAgICAgICAgICAgdGhpcy5vYXV0aERhdGEubG9naW5FcnJvciA9IHRoaXMuYWRhbC5nZXRMb2dpbkVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgaGFzaEhhbmRsZXIoaGFzaCwgcmVkaXJlY3RIYW5kbGVyLCBpc05vdENhbGxiYWNrSGFuZGxlciwgbmV4dEhhbmRsZXIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFkYWwuaXNDYWxsYmFjayhoYXNoKSkge1xuICAgICAgICAgICAgICAgIGxldCByZXF1ZXN0SW5mbyA9IHRoaXMuYWRhbC5nZXRSZXF1ZXN0SW5mbyhoYXNoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkYWwuc2F2ZVRva2VuRnJvbUhhc2gocmVxdWVzdEluZm8pO1xuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0SW5mby5yZXF1ZXN0VHlwZSAhPT0gdGhpcy5hZGFsLlJFUVVFU1RfVFlQRS5MT0dJTikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkYWwuY2FsbGJhY2sgPSB3aW5kb3cucGFyZW50LkF1dGhlbnRpY2F0aW9uQ29udGV4dCgpLmNhbGxiYWNrO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdEluZm8ucmVxdWVzdFR5cGUgPT09IHRoaXMuYWRhbC5SRVFVRVNUX1RZUEUuUkVORVdfVE9LRU4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRhbC5jYWxsYmFjayA9IHdpbmRvdy5wYXJlbnQuY2FsbEJhY2tNYXBwZWRUb1JlbmV3U3RhdGVzW3JlcXVlc3RJbmZvLnN0YXRlUmVzcG9uc2VdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0SW5mby5zdGF0ZU1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5hZGFsLmNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdEluZm8ucmVxdWVzdFR5cGUgPT09IHRoaXMuYWRhbC5SRVFVRVNUX1RZUEUuUkVORVdfVE9LRU4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdEluZm8ucGFyYW1ldGVyc1snYWNjZXNzX3Rva2VuJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGFsLmNhbGxiYWNrKHRoaXMuYWRhbC5fZ2V0SXRlbSh0aGlzLmFkYWwuQ09OU1RBTlRTLlNUT1JBR0UuRVJST1JfREVTQ1JJUFRJT04pLCByZXF1ZXN0SW5mby5wYXJhbWV0ZXJzWydhY2Nlc3NfdG9rZW4nXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0SGFuZGxlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXF1ZXN0SW5mby5wYXJhbWV0ZXJzWydpZF90b2tlbiddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRhbC5jYWxsYmFjayh0aGlzLmFkYWwuX2dldEl0ZW0odGhpcy5hZGFsLkNPTlNUQU5UUy5TVE9SQUdFLkVSUk9SX0RFU0NSSVBUSU9OKSwgcmVxdWVzdEluZm8ucGFyYW1ldGVyc1snaWRfdG9rZW4nXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0SGFuZGxlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRGF0YUZyb21DYWNoZSh0aGlzLmFkYWwuY29uZmlnLmxvZ2luUmVzb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub2F1dGhEYXRhLnVzZXJOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlRGF0YUZyb21DYWNoZShzZWxmLmFkYWwuY29uZmlnLmxvZ2luUmVzb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2dpblN0YXJ0UGFnZSA9IHNlbGYuYWRhbC5fZ2V0SXRlbShzZWxmLmFkYWwuQ09OU1RBTlRTLlNUT1JBR0UuU1RBUlRfUEFHRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvZ2luU3RhcnRQYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWRpcmVjdEhhbmRsZXIobG9naW5TdGFydFBhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTm90Q2FsbGJhY2tIYW5kbGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbG9naW5IYW5kbGVyKHBhdGgsIHJlZGlyZWN0SGFuZGxlciwgaGFuZGxlcikge1xuICAgICAgICAgICAgdGhpcy5hZGFsLmluZm8oJ0xvZ2luIGV2ZW50IGZvcjonICsgcGF0aCk7XG4gICAgICAgICAgICBpZiAodGhpcy5hZGFsLmNvbmZpZyAmJiB0aGlzLmFkYWwuY29uZmlnLmxvY2FsTG9naW5VcmwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVkaXJlY3RIYW5kbGVyKHRoaXMuYWRhbC5jb25maWcubG9jYWxMb2dpblVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkYWwuX3NhdmVJdGVtKHRoaXMuYWRhbC5DT05TVEFOVFMuU1RPUkFHRS5TVEFSVF9QQUdFLCBwYXRoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkYWwuaW5mbygnU3RhcnQgbG9naW4gYXQ6JyArIHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkYWwubG9naW4oKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbmZpZygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkYWwuY29uZmlnO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2luKCkge1xuICAgICAgICAgICAgdGhpcy5hZGFsLmxvZ2luKCk7XG4gICAgICAgIH1cbiAgICAgICAgbG9naW5JblByb2dyZXNzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRhbC5sb2dpbkluUHJvZ3Jlc3MoKTtcbiAgICAgICAgfVxuICAgICAgICBsb2dPdXQoKSB7XG4gICAgICAgICAgICB0aGlzLmFkYWwubG9nT3V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0Q2FjaGVkVG9rZW4ocmVzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkYWwuZ2V0Q2FjaGVkVG9rZW4ocmVzb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIGdldFVzZXJJbmZvKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub2F1dGhEYXRhO1xuICAgICAgICB9XG4gICAgICAgIGFjcXVpcmVUb2tlbihyZXNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkYWwuYWNxdWlyZVRva2VuKHJlc291cmNlLCAoZXJyb3IsIHRva2VuT3V0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodG9rZW5PdXQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBnZXRVc2VyKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIFByb21pc2UsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGFsLmdldFVzZXIoKGVycm9yLCB1c2VyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh1c2VyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBnZXRSZXNvdXJjZUZvckVuZHBvaW50KGVuZHBvaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGFsLmdldFJlc291cmNlRm9yRW5kcG9pbnQoZW5kcG9pbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNsZWFyQ2FjaGUoKSB7XG4gICAgICAgICAgICB0aGlzLmFkYWwuY2xlYXJDYWNoZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNsZWFyQ2FjaGVGb3JSZXNvdXJjZShyZXNvdXJjZSkge1xuICAgICAgICAgICAgdGhpcy5hZGFsLmNsZWFyQ2FjaGVGb3JSZXNvdXJjZShyZXNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5mbyhtZXNzYWdlKSB7XG4gICAgICAgICAgICB0aGlzLmFkYWwuaW5mbyhtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICB2ZXJib3NlKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhbC52ZXJib3NlKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGlzQXV0aGVudGljYXRlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9hdXRoRGF0YS5pc0F1dGhlbnRpY2F0ZWQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEF1cmVsaWFBZGFsID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGF1cmVsaWFfZnJhbWV3b3JrXzEuaW5qZWN0KEFkYWwpLCBcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbT2JqZWN0XSlcbiAgICBdLCBBdXJlbGlhQWRhbCk7XG4gICAgZXhwb3J0cy5BdXJlbGlhQWRhbCA9IEF1cmVsaWFBZGFsO1xufSk7XG4iLCJpbXBvcnQge2luamVjdH0gZnJvbSAnYXVyZWxpYS1mcmFtZXdvcmsnO1xyXG5pbXBvcnQge0F1cmVsaWFBZGFsQ29uZmlnfSBmcm9tICcuL2F1cmVsaWEtYWRhbC1jb25maWcnO1xyXG5pbXBvcnQgKiBhcyBBZGFsIGZyb20gJ2FkYWwnO1xyXG5cclxuQGluamVjdChBZGFsKVxyXG5leHBvcnQgY2xhc3MgQXVyZWxpYUFkYWwge1xyXG5cclxuICBwcml2YXRlIGFkYWw6IEFkYWw7XHJcbiAgcHJpdmF0ZSBvYXV0aERhdGEgPSB7XHJcbiAgICBpc0F1dGhlbnRpY2F0ZWQ6IGZhbHNlLFxyXG4gICAgdXNlck5hbWU6ICcnLFxyXG4gICAgbG9naW5FcnJvcjogJycsXHJcbiAgICBwcm9maWxlOiBudWxsXHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFkYWxDb25zdHJ1Y3RvcjogQWRhbCkge1xyXG4gICAgXHJcbiAgfVxyXG4gIFxyXG4gIGNvbmZpZ3VyZShjb25maWc6IEF1cmVsaWFBZGFsQ29uZmlnKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBsZXQgY29uZmlnT3B0aW9uczogQWRhbENvbmZpZyA9IHt9O1xyXG4gICAgICBcclxuICAgICAgY29uZmlnT3B0aW9ucy50ZW5hbnQgPSBjb25maWcudGVuYW50O1xyXG4gICAgICBjb25maWdPcHRpb25zLmNsaWVudElkID0gY29uZmlnLmNsaWVudElkO1xyXG4gICAgICBjb25maWdPcHRpb25zLmVuZHBvaW50cyA9IGNvbmZpZy5lbmRwb2ludHM7XHJcblxyXG4gICAgICAvLyByZWRpcmVjdCBhbmQgbG9nb3V0X3JlZGlyZWN0IGFyZSBzZXQgdG8gY3VycmVudCBsb2NhdGlvbiBieSBkZWZhdWx0XHJcbiAgICAgIGxldCBleGlzdGluZ0hhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcclxuICAgICAgbGV0IHBhdGhEZWZhdWx0ID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XHJcbiAgICAgIGlmIChleGlzdGluZ0hhc2gpIHtcclxuICAgICAgICBwYXRoRGVmYXVsdCA9IHBhdGhEZWZhdWx0LnJlcGxhY2UoZXhpc3RpbmdIYXNoLCAnJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbmZpZ09wdGlvbnMucmVkaXJlY3RVcmkgPSBjb25maWdPcHRpb25zLnJlZGlyZWN0VXJpIHx8IHBhdGhEZWZhdWx0O1xyXG4gICAgICBjb25maWdPcHRpb25zLnBvc3RMb2dvdXRSZWRpcmVjdFVyaSA9IGNvbmZpZ09wdGlvbnMucG9zdExvZ291dFJlZGlyZWN0VXJpIHx8IHBhdGhEZWZhdWx0O1xyXG5cclxuICAgICAgdGhpcy5hZGFsID0gdGhpcy5hZGFsQ29uc3RydWN0b3IuaW5qZWN0KGNvbmZpZ09wdGlvbnMpO1xyXG4gICAgICBcclxuICAgICAgd2luZG93LkF1dGhlbnRpY2F0aW9uQ29udGV4dCA9ICgpID0+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hZGFsO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICB0aGlzLnVwZGF0ZURhdGFGcm9tQ2FjaGUodGhpcy5hZGFsLmNvbmZpZy5sb2dpblJlc291cmNlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlRGF0YUZyb21DYWNoZShyZXNvdXJjZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICB2YXIgdG9rZW4gPSB0aGlzLmFkYWwuZ2V0Q2FjaGVkVG9rZW4ocmVzb3VyY2UpO1xyXG4gICAgdGhpcy5vYXV0aERhdGEuaXNBdXRoZW50aWNhdGVkID0gdG9rZW4gIT09IG51bGwgJiYgdG9rZW4ubGVuZ3RoID4gMDtcclxuICAgIHZhciB1c2VyID0gdGhpcy5hZGFsLmdldENhY2hlZFVzZXIoKSB8fCB7IHVzZXJOYW1lOiAnJywgcHJvZmlsZTogbnVsbCB9O1xyXG4gICAgdGhpcy5vYXV0aERhdGEudXNlck5hbWUgPSB1c2VyLnVzZXJOYW1lO1xyXG4gICAgdGhpcy5vYXV0aERhdGEucHJvZmlsZSA9IHVzZXIucHJvZmlsZTtcclxuICAgIHRoaXMub2F1dGhEYXRhLmxvZ2luRXJyb3IgPSB0aGlzLmFkYWwuZ2V0TG9naW5FcnJvcigpO1xyXG4gIH1cclxuXHJcbiAgaGFzaEhhbmRsZXIoaGFzaDogc3RyaW5nLCByZWRpcmVjdEhhbmRsZXI6IEZ1bmN0aW9uLCBpc05vdENhbGxiYWNrSGFuZGxlcjogRnVuY3Rpb24sIG5leHRIYW5kbGVyOiBGdW5jdGlvbik6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuYWRhbC5pc0NhbGxiYWNrKGhhc2gpKSB7XHJcbiAgICAgIGxldCByZXF1ZXN0SW5mbyA9IHRoaXMuYWRhbC5nZXRSZXF1ZXN0SW5mbyhoYXNoKTtcclxuICAgICAgXHJcbiAgICAgIHRoaXMuYWRhbC5zYXZlVG9rZW5Gcm9tSGFzaChyZXF1ZXN0SW5mbyk7XHJcblxyXG4gICAgICBpZiAocmVxdWVzdEluZm8ucmVxdWVzdFR5cGUgIT09IHRoaXMuYWRhbC5SRVFVRVNUX1RZUEUuTE9HSU4pIHtcclxuICAgICAgICB0aGlzLmFkYWwuY2FsbGJhY2sgPSB3aW5kb3cucGFyZW50LkF1dGhlbnRpY2F0aW9uQ29udGV4dCgpLmNhbGxiYWNrO1xyXG4gICAgICAgIGlmIChyZXF1ZXN0SW5mby5yZXF1ZXN0VHlwZSA9PT0gdGhpcy5hZGFsLlJFUVVFU1RfVFlQRS5SRU5FV19UT0tFTikge1xyXG4gICAgICAgICAgdGhpcy5hZGFsLmNhbGxiYWNrID0gd2luZG93LnBhcmVudC5jYWxsQmFja01hcHBlZFRvUmVuZXdTdGF0ZXNbcmVxdWVzdEluZm8uc3RhdGVSZXNwb25zZV07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBSZXR1cm4gdG8gY2FsbGJhY2sgaWYgaXQgaXMgc2VudCBmcm9tIGlmcmFtZVxyXG4gICAgICBpZiAocmVxdWVzdEluZm8uc3RhdGVNYXRjaCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5hZGFsLmNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAvLyBDYWxsIHdpdGhpbiB0aGUgc2FtZSBjb250ZXh0IHdpdGhvdXQgZnVsbCBwYWdlIHJlZGlyZWN0IGtlZXBzIHRoZSBjYWxsYmFja1xyXG4gICAgICAgICAgaWYgKHJlcXVlc3RJbmZvLnJlcXVlc3RUeXBlID09PSB0aGlzLmFkYWwuUkVRVUVTVF9UWVBFLlJFTkVXX1RPS0VOKSB7XHJcbiAgICAgICAgICAgIC8vIElkdG9rZW4gb3IgQWNjZXN0b2tlbiBjYW4gYmUgcmVuZXdlZFxyXG4gICAgICAgICAgICBpZiAocmVxdWVzdEluZm8ucGFyYW1ldGVyc1snYWNjZXNzX3Rva2VuJ10pIHtcclxuICAgICAgICAgICAgICB0aGlzLmFkYWwuY2FsbGJhY2sodGhpcy5hZGFsLl9nZXRJdGVtKHRoaXMuYWRhbC5DT05TVEFOVFMuU1RPUkFHRS5FUlJPUl9ERVNDUklQVElPTiksIHJlcXVlc3RJbmZvLnBhcmFtZXRlcnNbJ2FjY2Vzc190b2tlbiddKTtcclxuICAgICAgICAgICAgICByZXR1cm4gbmV4dEhhbmRsZXIoKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXF1ZXN0SW5mby5wYXJhbWV0ZXJzWydpZF90b2tlbiddKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5hZGFsLmNhbGxiYWNrKHRoaXMuYWRhbC5fZ2V0SXRlbSh0aGlzLmFkYWwuQ09OU1RBTlRTLlNUT1JBR0UuRVJST1JfREVTQ1JJUFRJT04pLCByZXF1ZXN0SW5mby5wYXJhbWV0ZXJzWydpZF90b2tlbiddKTtcclxuICAgICAgICAgICAgICByZXR1cm4gbmV4dEhhbmRsZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBub3JtYWwgZnVsbCBsb2dpbiByZWRpcmVjdCBoYXBwZW5lZCBvbiB0aGUgcGFnZVxyXG4gICAgICAgICAgdGhpcy51cGRhdGVEYXRhRnJvbUNhY2hlKHRoaXMuYWRhbC5jb25maWcubG9naW5SZXNvdXJjZSk7XHJcbiAgICAgICAgICBpZiAodGhpcy5vYXV0aERhdGEudXNlck5hbWUpIHtcclxuICAgICAgICAgICAgLy9JRHRva2VuIGlzIGFkZGVkIGFzIHRva2VuIGZvciB0aGUgYXBwXHJcbiAgICAgICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHNlbGYudXBkYXRlRGF0YUZyb21DYWNoZShzZWxmLmFkYWwuY29uZmlnLmxvZ2luUmVzb3VyY2UpO1xyXG4gICAgICAgICAgICAvLyByZWRpcmVjdCB0byBsb2dpbiByZXF1ZXN0ZWQgcGFnZVxyXG4gICAgICAgICAgICB2YXIgbG9naW5TdGFydFBhZ2UgPSBzZWxmLmFkYWwuX2dldEl0ZW0oc2VsZi5hZGFsLkNPTlNUQU5UUy5TVE9SQUdFLlNUQVJUX1BBR0UpO1xyXG4gICAgICAgICAgICBpZiAobG9naW5TdGFydFBhZ2UpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gcmVkaXJlY3RIYW5kbGVyKGxvZ2luU3RhcnRQYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBUT0RPOiBicm9hZGNhc3QgbG9naW4gc3VjY2Vzcz9cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFRPRE86IGJyb2FkY2FzdCBsb2dpbiBmYWlsdXJlPyAocmVhc29uOiB0aGlzLmFkYWwuX2dldEl0ZW0odGhpcy5hZGFsLkNPTlNUQU5UUy5TVE9SQUdFLkVSUk9SX0RFU0NSSVBUSU9OKSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBpc05vdENhbGxiYWNrSGFuZGxlcigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbG9naW5IYW5kbGVyKHBhdGg6IHN0cmluZywgcmVkaXJlY3RIYW5kbGVyOiBGdW5jdGlvbiwgaGFuZGxlcjogRnVuY3Rpb24pIHtcclxuICAgIHRoaXMuYWRhbC5pbmZvKCdMb2dpbiBldmVudCBmb3I6JyArIHBhdGgpO1xyXG5cclxuICAgIGlmICh0aGlzLmFkYWwuY29uZmlnICYmIHRoaXMuYWRhbC5jb25maWcubG9jYWxMb2dpblVybCkge1xyXG4gICAgICByZXR1cm4gcmVkaXJlY3RIYW5kbGVyKHRoaXMuYWRhbC5jb25maWcubG9jYWxMb2dpblVybCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBkaXJlY3RseSBzdGFydCBsb2dpbiBmbG93XHJcbiAgICAgIHRoaXMuYWRhbC5fc2F2ZUl0ZW0odGhpcy5hZGFsLkNPTlNUQU5UUy5TVE9SQUdFLlNUQVJUX1BBR0UsIHBhdGgpO1xyXG4gICAgICB0aGlzLmFkYWwuaW5mbygnU3RhcnQgbG9naW4gYXQ6JyArIHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcclxuICAgICAgLy8gVE9ETzogYnJvYWRjYXN0IGxvZ2luIHJlZGlyZWN0P1xyXG4gICAgICB0aGlzLmFkYWwubG9naW4oKTtcclxuICAgICAgcmV0dXJuIGhhbmRsZXIoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbmZpZygpOiBBZGFsQ29uZmlnIHtcclxuICAgIHJldHVybiB0aGlzLmFkYWwuY29uZmlnO1xyXG4gIH1cclxuXHJcbiAgbG9naW4oKSB7XHJcbiAgICB0aGlzLmFkYWwubG9naW4oKTtcclxuICB9XHJcblxyXG4gIGxvZ2luSW5Qcm9ncmVzcygpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmFkYWwubG9naW5JblByb2dyZXNzKCk7XHJcbiAgfVxyXG5cclxuICBsb2dPdXQoKSB7XHJcbiAgICB0aGlzLmFkYWwubG9nT3V0KCk7XHJcbiAgfVxyXG5cclxuICBnZXRDYWNoZWRUb2tlbihyZXNvdXJjZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLmFkYWwuZ2V0Q2FjaGVkVG9rZW4ocmVzb3VyY2UpO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckluZm8oKTogYW55IHtcclxuICAgIHJldHVybiB0aGlzLm9hdXRoRGF0YTtcclxuICB9XHJcblxyXG4gIGFjcXVpcmVUb2tlbihyZXNvdXJjZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIC8vIGF1dG9tYXRlZCB0b2tlbiByZXF1ZXN0IGNhbGxcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgdGhpcy5hZGFsLmFjcXVpcmVUb2tlbihyZXNvdXJjZSwgKGVycm9yOiBzdHJpbmcsIHRva2VuT3V0OiBzdHJpbmcpID0+IHtcclxuICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlc29sdmUodG9rZW5PdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldFVzZXIoKTogUHJvbWlzZTxVc2VyPiB7XHJcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2U8VXNlcj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICB0aGlzLmFkYWwuZ2V0VXNlcigoZXJyb3I6IHN0cmluZywgdXNlcjogVXNlcikgPT4ge1xyXG4gICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVzb2x2ZSh1c2VyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRSZXNvdXJjZUZvckVuZHBvaW50KGVuZHBvaW50OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuYWRhbC5nZXRSZXNvdXJjZUZvckVuZHBvaW50KGVuZHBvaW50KTtcclxuICB9XHJcblxyXG4gIGNsZWFyQ2FjaGUoKSB7XHJcbiAgICB0aGlzLmFkYWwuY2xlYXJDYWNoZSgpO1xyXG4gIH1cclxuXHJcbiAgY2xlYXJDYWNoZUZvclJlc291cmNlKHJlc291cmNlOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuYWRhbC5jbGVhckNhY2hlRm9yUmVzb3VyY2UocmVzb3VyY2UpO1xyXG4gIH1cclxuXHJcbiAgaW5mbyhtZXNzYWdlOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuYWRhbC5pbmZvKG1lc3NhZ2UpO1xyXG4gIH1cclxuXHJcbiAgdmVyYm9zZShtZXNzYWdlOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuYWRhbC52ZXJib3NlKG1lc3NhZ2UpO1xyXG4gIH1cclxuXHJcblxyXG4gIGlzQXV0aGVudGljYXRlZCgpIHtcclxuICAgIHJldHVybiB0aGlzLm9hdXRoRGF0YS5pc0F1dGhlbnRpY2F0ZWQ7XHJcbiAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
