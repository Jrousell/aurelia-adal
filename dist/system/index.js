'use strict';

System.register(['./aurelia-adal', './aurelia-adal-fetch-config', './aurelia-adal-authorize-step'], function (exports_1) {
    var __awaiter = this && this.__awaiter || function (thisArg, _arguments, Promise, generator) {
        return new Promise(function (resolve, reject) {
            generator = generator.call(thisArg, _arguments);
            function cast(value) {
                return value instanceof Promise && value.constructor === Promise ? value : new Promise(function (resolve) {
                    resolve(value);
                });
            }
            function onfulfill(value) {
                try {
                    step("next", value);
                } catch (e) {
                    reject(e);
                }
            }
            function onreject(value) {
                try {
                    step("throw", value);
                } catch (e) {
                    reject(e);
                }
            }
            function step(verb, value) {
                var result = generator[verb](value);
                result.done ? resolve(result.value) : cast(result.value).then(onfulfill, onreject);
            }
            step("next", void 0);
        });
    };
    var aurelia_adal_1, aurelia_adal_fetch_config_1, aurelia_adal_authorize_step_1;
    function configure(frameworkConfig, config) {
        var aureliaAdal = frameworkConfig.container.get(aurelia_adal_1.AureliaAdal);
        aureliaAdal.configure(config);
    }
    exports_1("configure", configure);
    return {
        setters: [function (aurelia_adal_1_1) {
            aurelia_adal_1 = aurelia_adal_1_1;
        }, function (aurelia_adal_fetch_config_1_1) {
            aurelia_adal_fetch_config_1 = aurelia_adal_fetch_config_1_1;
        }, function (aurelia_adal_authorize_step_1_1) {
            aurelia_adal_authorize_step_1 = aurelia_adal_authorize_step_1_1;
        }],
        execute: function execute() {
            exports_1("AureliaAdal", aurelia_adal_1.AureliaAdal);
            exports_1("AureliaAdalFetchConfig", aurelia_adal_fetch_config_1.AureliaAdalFetchConfig);
            exports_1("AureliaAdalAuthorizeStep", aurelia_adal_authorize_step_1.AureliaAdalAuthorizeStep);
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwiaW5kZXgudHMiXSwibmFtZXMiOlsiY29uZmlndXJlIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSw2QkFBNkIsRUFBRSwrQkFBK0IsQ0FBQyxFQUFFLFVBQVMsU0FBUyxFQUFFO0FBQ3BILFFBQUksU0FBUyxHQUFHLEFBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUssVUFBVSxPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUU7QUFDM0YsZUFBTyxJQUFJLE9BQU8sQ0FBQyxVQUFVLE9BQU8sRUFBRSxNQUFNLEVBQUU7QUFDMUMscUJBQVMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNoRCxxQkFBUyxJQUFJLENBQUMsS0FBSyxFQUFFO0FBQUUsdUJBQU8sS0FBSyxZQUFZLE9BQU8sSUFBSSxLQUFLLENBQUMsV0FBVyxLQUFLLE9BQU8sR0FBRyxLQUFLLEdBQUcsSUFBSSxPQUFPLENBQUMsVUFBVSxPQUFPLEVBQUU7QUFBRSwyQkFBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUFFLENBQUMsQ0FBQzthQUFFO0FBQ3hKLHFCQUFTLFNBQVMsQ0FBQyxLQUFLLEVBQUU7QUFBRSxvQkFBSTtBQUFFLHdCQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO2lCQUFFLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFBRSwwQkFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUFFO2FBQUU7QUFDbkYscUJBQVMsUUFBUSxDQUFDLEtBQUssRUFBRTtBQUFFLG9CQUFJO0FBQUUsd0JBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7aUJBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUFFLDBCQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQUU7YUFBRTtBQUNuRixxQkFBUyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRTtBQUN2QixvQkFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BDLHNCQUFNLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO2FBQ3RGO0FBQ0QsZ0JBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUN4QixDQUFDLENBQUM7S0FDTixDQUFDO0FBQ0YsUUFBSSxjQUFjLEVBQUUsMkJBQTJCLEVBQUUsNkJBQTZCLENBQUM7QUNSbkYsYUFBQSxTQUFBLENBQTBCLGVBQXVDLEVBQUUsTUFBeUIsRUFBQTtBQUMxRkEsWUFBSUEsV0FBV0EsR0FBZ0JBLGVBQWVBLENBQUNBLFNBQVNBLENBQUNBLEdBQUdBLENBQUNBLGNBQUFBLENBQUFBLFdBQVdBLENBQUNBLENBQUNBO0FBRTFFQSxtQkFBV0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7S0FDL0JBO0FBSkQsYUFBQSxDQUFBLFdBQUEsRUFBQSxTQUFBLENBSUMsQ0FBQTtBRFVHLFdBQU87QUFDSCxlQUFPLEVBQUMsQ0FDSixVQUFVLGdCQUFnQixFQUFFO0FBQ3hCLDBCQUFjLEdBQUcsZ0JBQWdCLENBQUM7U0FDckMsRUFDRCxVQUFVLDZCQUE2QixFQUFFO0FBQ3JDLHVDQUEyQixHQUFHLDZCQUE2QixDQUFDO1NBQy9ELEVBQ0QsVUFBVSwrQkFBK0IsRUFBRTtBQUN2Qyx5Q0FBNkIsR0FBRywrQkFBK0IsQ0FBQztTQUNuRSxDQUFDO0FBQ04sZUFBTyxFQUFFLG1CQUFXO0FDbEJ4QixxQkFBQSxDQUFBLGFBQUEsRUFBQSxjQUFBLENBQUEsV0FBQSxDQUFXLENBQUE7QUFFWCxxQkFBQSxDQUFBLHdCQUFBLEVBQUEsMkJBQUEsQ0FBQSxzQkFBQSxDQUFzQixDQUFBO0FBQ3RCLHFCQUFBLENBQUEsMEJBQUEsRUFBQSw2QkFBQSxDQUFBLHdCQUFBLENBQXdCLENBQUE7U0RtQm5CO0tBQ0osQ0FBQTtDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlN5c3RlbS5yZWdpc3RlcihbJy4vYXVyZWxpYS1hZGFsJywgJy4vYXVyZWxpYS1hZGFsLWZldGNoLWNvbmZpZycsICcuL2F1cmVsaWEtYWRhbC1hdXRob3JpemUtc3RlcCddLCBmdW5jdGlvbihleHBvcnRzXzEpIHtcbiAgICB2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQcm9taXNlLCBnZW5lcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGdlbmVyYXRvciA9IGdlbmVyYXRvci5jYWxsKHRoaXNBcmcsIF9hcmd1bWVudHMpO1xuICAgICAgICAgICAgZnVuY3Rpb24gY2FzdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlICYmIHZhbHVlLmNvbnN0cnVjdG9yID09PSBQcm9taXNlID8gdmFsdWUgOiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uZnVsZmlsbCh2YWx1ZSkgeyB0cnkgeyBzdGVwKFwibmV4dFwiLCB2YWx1ZSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG9ucmVqZWN0KHZhbHVlKSB7IHRyeSB7IHN0ZXAoXCJ0aHJvd1wiLCB2YWx1ZSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHN0ZXAodmVyYiwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gZ2VuZXJhdG9yW3ZlcmJdKHZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGNhc3QocmVzdWx0LnZhbHVlKS50aGVuKG9uZnVsZmlsbCwgb25yZWplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RlcChcIm5leHRcIiwgdm9pZCAwKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICB2YXIgYXVyZWxpYV9hZGFsXzEsIGF1cmVsaWFfYWRhbF9mZXRjaF9jb25maWdfMSwgYXVyZWxpYV9hZGFsX2F1dGhvcml6ZV9zdGVwXzE7XG4gICAgZnVuY3Rpb24gY29uZmlndXJlKGZyYW1ld29ya0NvbmZpZywgY29uZmlnKSB7XG4gICAgICAgIGxldCBhdXJlbGlhQWRhbCA9IGZyYW1ld29ya0NvbmZpZy5jb250YWluZXIuZ2V0KGF1cmVsaWFfYWRhbF8xLkF1cmVsaWFBZGFsKTtcbiAgICAgICAgYXVyZWxpYUFkYWwuY29uZmlndXJlKGNvbmZpZyk7XG4gICAgfVxuICAgIGV4cG9ydHNfMShcImNvbmZpZ3VyZVwiLCBjb25maWd1cmUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHNldHRlcnM6W1xuICAgICAgICAgICAgZnVuY3Rpb24gKGF1cmVsaWFfYWRhbF8xXzEpIHtcbiAgICAgICAgICAgICAgICBhdXJlbGlhX2FkYWxfMSA9IGF1cmVsaWFfYWRhbF8xXzE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb24gKGF1cmVsaWFfYWRhbF9mZXRjaF9jb25maWdfMV8xKSB7XG4gICAgICAgICAgICAgICAgYXVyZWxpYV9hZGFsX2ZldGNoX2NvbmZpZ18xID0gYXVyZWxpYV9hZGFsX2ZldGNoX2NvbmZpZ18xXzE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb24gKGF1cmVsaWFfYWRhbF9hdXRob3JpemVfc3RlcF8xXzEpIHtcbiAgICAgICAgICAgICAgICBhdXJlbGlhX2FkYWxfYXV0aG9yaXplX3N0ZXBfMSA9IGF1cmVsaWFfYWRhbF9hdXRob3JpemVfc3RlcF8xXzE7XG4gICAgICAgICAgICB9XSxcbiAgICAgICAgZXhlY3V0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBvcnRzXzEoXCJBdXJlbGlhQWRhbFwiLCBhdXJlbGlhX2FkYWxfMS5BdXJlbGlhQWRhbCk7XG4gICAgICAgICAgICBleHBvcnRzXzEoXCJBdXJlbGlhQWRhbEZldGNoQ29uZmlnXCIsIGF1cmVsaWFfYWRhbF9mZXRjaF9jb25maWdfMS5BdXJlbGlhQWRhbEZldGNoQ29uZmlnKTtcbiAgICAgICAgICAgIGV4cG9ydHNfMShcIkF1cmVsaWFBZGFsQXV0aG9yaXplU3RlcFwiLCBhdXJlbGlhX2FkYWxfYXV0aG9yaXplX3N0ZXBfMS5BdXJlbGlhQWRhbEF1dGhvcml6ZVN0ZXApO1xuICAgICAgICB9XG4gICAgfVxufSk7XG4iLCJpbXBvcnQgeyBGcmFtZXdvcmtDb25maWd1cmF0aW9uIH0gZnJvbSAnYXVyZWxpYS1mcmFtZXdvcmsnO1xyXG5pbXBvcnQgeyBBdXJlbGlhQWRhbENvbmZpZyB9IGZyb20gJy4vYXVyZWxpYS1hZGFsLWNvbmZpZyc7XHJcbmltcG9ydCB7IEF1cmVsaWFBZGFsIH0gZnJvbSAnLi9hdXJlbGlhLWFkYWwnO1xyXG5pbXBvcnQgeyBBdXJlbGlhQWRhbEZldGNoQ29uZmlnIH0gZnJvbSAnLi9hdXJlbGlhLWFkYWwtZmV0Y2gtY29uZmlnJztcclxuaW1wb3J0IHsgQXVyZWxpYUFkYWxBdXRob3JpemVTdGVwIH0gZnJvbSAnLi9hdXJlbGlhLWFkYWwtYXV0aG9yaXplLXN0ZXAnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VyZShmcmFtZXdvcmtDb25maWc6IEZyYW1ld29ya0NvbmZpZ3VyYXRpb24sIGNvbmZpZzogQXVyZWxpYUFkYWxDb25maWcpIHtcclxuICBsZXQgYXVyZWxpYUFkYWw6IEF1cmVsaWFBZGFsID0gZnJhbWV3b3JrQ29uZmlnLmNvbnRhaW5lci5nZXQoQXVyZWxpYUFkYWwpO1xyXG4gIFxyXG4gIGF1cmVsaWFBZGFsLmNvbmZpZ3VyZShjb25maWcpO1xyXG59XHJcblxyXG5leHBvcnQge1xyXG4gICAgQXVyZWxpYUFkYWwsXHJcbiAgICBBdXJlbGlhQWRhbENvbmZpZyxcclxuICAgIEF1cmVsaWFBZGFsRmV0Y2hDb25maWcsXHJcbiAgICBBdXJlbGlhQWRhbEF1dGhvcml6ZVN0ZXBcclxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
