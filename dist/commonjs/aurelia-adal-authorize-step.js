"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = undefined && undefined.__metadata || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var aurelia_framework_1 = require('aurelia-framework');
var aurelia_router_1 = require('aurelia-router');
var aurelia_adal_manager_1 = require('./aurelia-adal-manager');
var AureliaAdalAuthorizeStep = (function () {
    function AureliaAdalAuthorizeStep(aureliaAdal) {
        _classCallCheck(this, AureliaAdalAuthorizeStep);

        this.aureliaAdal = aureliaAdal;
    }

    _createClass(AureliaAdalAuthorizeStep, [{
        key: "run",
        value: function run(routingContext, next) {
            var _this = this;

            var hash = window.location.hash;
            return this.aureliaAdal.hashHandler(hash, function (url) {
                // Was callback
                return next.cancel(new aurelia_router_1.Redirect(url));
            }, function () {
                // Was not callback
                var loginRoute = ''; // TODO: get login url from aureliaAdal
                if (routingContext.getAllInstructions().some(function (i) {
                    return !!i.config.settings.requireAdalLogin;
                })) {
                    if (!_this.aureliaAdal.isAuthenticated()) {
                        // Not logged in, redirect to login route
                        return _this.aureliaAdal.loginHandler(routingContext.fragment, function (url) {
                            return next.cancel(new aurelia_router_1.Redirect(url));
                        }, function () {
                            return next.cancel('login redirect');
                        });
                    }
                } else if (_this.aureliaAdal.isAuthenticated() && routingContext.getAllInstructions().some(function (i) {
                    return i.fragment == loginRoute;
                })) {
                    // Logged in, current route is the login route
                    var loginRedirect = '';
                    return next.cancel(new aurelia_router_1.Redirect(loginRedirect));
                }
                return next();
            }, function () {
                return next();
            });
        }
    }]);

    return AureliaAdalAuthorizeStep;
})();
AureliaAdalAuthorizeStep = __decorate([aurelia_framework_1.inject(aurelia_adal_manager_1.AureliaAdalManager), __metadata('design:paramtypes', [aurelia_adal_manager_1.AureliaAdalManager])], AureliaAdalAuthorizeStep);
exports.AureliaAdalAuthorizeStep = AureliaAdalAuthorizeStep;
//# sourceMappingURL=data:application/json;base64,
