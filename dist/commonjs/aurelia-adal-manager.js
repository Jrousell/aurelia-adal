"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = undefined && undefined.__metadata || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, Promise, generator) {
    return new Promise(function (resolve, reject) {
        generator = generator.call(thisArg, _arguments);
        function cast(value) {
            return value instanceof Promise && value.constructor === Promise ? value : new Promise(function (resolve) {
                resolve(value);
            });
        }
        function onfulfill(value) {
            try {
                step("next", value);
            } catch (e) {
                reject(e);
            }
        }
        function onreject(value) {
            try {
                step("throw", value);
            } catch (e) {
                reject(e);
            }
        }
        function step(verb, value) {
            var result = generator[verb](value);
            result.done ? resolve(result.value) : cast(result.value).then(onfulfill, onreject);
        }
        step("next", void 0);
    });
};
var aurelia_framework_1 = require('aurelia-framework');
var Adal = require('adal');
var AureliaAdalManager = (function () {
    function AureliaAdalManager(adalConstructor) {
        _classCallCheck(this, AureliaAdalManager);

        this.adalConstructor = adalConstructor;
        this.oauthData = {
            isAuthenticated: false,
            userName: '',
            loginError: '',
            profile: null
        };
    }

    _createClass(AureliaAdalManager, [{
        key: "configure",
        value: function configure(config) {
            var _this = this;

            try {
                var configOptions = {};
                configOptions.tenant = config.tenant;
                configOptions.clientId = config.clientId;
                configOptions.endpoints = config.endpoints;
                // redirect and logout_redirect are set to current location by default
                var existingHash = window.location.hash;
                var pathDefault = window.location.href;
                if (existingHash) {
                    pathDefault = pathDefault.replace(existingHash, '');
                }
                configOptions.redirectUri = configOptions.redirectUri || pathDefault;
                configOptions.postLogoutRedirectUri = configOptions.postLogoutRedirectUri || pathDefault;
                this.adal = this.adalConstructor.inject(configOptions);
                window.AuthenticationContext = function () {
                    return _this.adal;
                };
                this.updateDataFromCache(this.adal.config.loginResource);
            } catch (e) {
                console.log(e);
            }
        }
    }, {
        key: "updateDataFromCache",
        value: function updateDataFromCache(resource) {
            var token = this.adal.getCachedToken(resource);
            this.oauthData.isAuthenticated = token !== null && token.length > 0;
            var user = this.adal.getCachedUser() || { userName: '', profile: null };
            this.oauthData.userName = user.userName;
            this.oauthData.profile = user.profile;
            this.oauthData.loginError = this.adal.getLoginError();
        }
    }, {
        key: "hashHandler",
        value: function hashHandler(hash, redirectHandler, isNotCallbackHandler, nextHandler) {
            if (this.adal.isCallback(hash)) {
                var requestInfo = this.adal.getRequestInfo(hash);
                this.adal.saveTokenFromHash(requestInfo);
                if (requestInfo.requestType !== this.adal.REQUEST_TYPE.LOGIN) {
                    this.adal.callback = window.parent.AuthenticationContext().callback;
                    if (requestInfo.requestType === this.adal.REQUEST_TYPE.RENEW_TOKEN) {
                        this.adal.callback = window.parent.callBackMappedToRenewStates[requestInfo.stateResponse];
                    }
                }
                // Return to callback if it is sent from iframe
                if (requestInfo.stateMatch) {
                    if (typeof this.adal.callback === 'function') {
                        // Call within the same context without full page redirect keeps the callback
                        if (requestInfo.requestType === this.adal.REQUEST_TYPE.RENEW_TOKEN) {
                            // Idtoken or Accestoken can be renewed
                            if (requestInfo.parameters['access_token']) {
                                this.adal.callback(this.adal._getItem(this.adal.CONSTANTS.STORAGE.ERROR_DESCRIPTION), requestInfo.parameters['access_token']);
                                return nextHandler();
                            } else if (requestInfo.parameters['id_token']) {
                                this.adal.callback(this.adal._getItem(this.adal.CONSTANTS.STORAGE.ERROR_DESCRIPTION), requestInfo.parameters['id_token']);
                                return nextHandler();
                            }
                        }
                    } else {
                        // normal full login redirect happened on the page
                        this.updateDataFromCache(this.adal.config.loginResource);
                        if (this.oauthData.userName) {
                            //IDtoken is added as token for the app
                            var _self = this;
                            _self.updateDataFromCache(_self.adal.config.loginResource);
                            // redirect to login requested page
                            var loginStartPage = _self.adal._getItem(_self.adal.CONSTANTS.STORAGE.START_PAGE);
                            if (loginStartPage) {
                                return redirectHandler(loginStartPage);
                            }
                        } else {}
                    }
                }
            } else {
                return isNotCallbackHandler();
            }
        }
    }, {
        key: "loginHandler",
        value: function loginHandler(path, redirectHandler, handler) {
            this.adal.info('Login event for:' + path);
            if (this.adal.config && this.adal.config.localLoginUrl) {
                return redirectHandler(this.adal.config.localLoginUrl);
            } else {
                // directly start login flow
                this.adal._saveItem(this.adal.CONSTANTS.STORAGE.START_PAGE, path);
                this.adal.info('Start login at:' + window.location.href);
                // TODO: broadcast login redirect?
                this.adal.login();
                return handler();
            }
        }
    }, {
        key: "config",
        value: function config() {
            return this.adal.config;
        }
    }, {
        key: "login",
        value: function login() {
            this.adal.login();
        }
    }, {
        key: "loginInProgress",
        value: function loginInProgress() {
            return this.adal.loginInProgress();
        }
    }, {
        key: "logOut",
        value: function logOut() {
            this.adal.logOut();
        }
    }, {
        key: "getCachedToken",
        value: function getCachedToken(resource) {
            return this.adal.getCachedToken(resource);
        }
    }, {
        key: "getUserInfo",
        value: function getUserInfo() {
            return this.oauthData;
        }
    }, {
        key: "acquireToken",
        value: function acquireToken(resource) {
            var _this2 = this;

            // automated token request call
            return new Promise(function (resolve, reject) {
                _this2.adal.acquireToken(resource, function (error, tokenOut) {
                    if (error) {
                        reject(error);
                    } else {
                        resolve(tokenOut);
                    }
                });
            });
        }
    }, {
        key: "getUser",
        value: function getUser() {
            return __awaiter(this, void 0, Promise, regeneratorRuntime.mark(function callee$2$0() {
                return regeneratorRuntime.wrap(function callee$2$0$(context$3$0) {
                    var _this3 = this;

                    while (1) switch (context$3$0.prev = context$3$0.next) {
                        case 0:
                            context$3$0.next = 2;
                            return new Promise(function (resolve, reject) {
                                _this3.adal.getUser(function (error, user) {
                                    if (error) {
                                        reject(error);
                                    } else {
                                        resolve(user);
                                    }
                                });
                            });

                        case 2:
                            return context$3$0.abrupt("return", context$3$0.sent);

                        case 3:
                        case "end":
                            return context$3$0.stop();
                    }
                }, callee$2$0, this);
            }));
        }
    }, {
        key: "getResourceForEndpoint",
        value: function getResourceForEndpoint(endpoint) {
            return this.adal.getResourceForEndpoint(endpoint);
        }
    }, {
        key: "clearCache",
        value: function clearCache() {
            this.adal.clearCache();
        }
    }, {
        key: "clearCacheForResource",
        value: function clearCacheForResource(resource) {
            this.adal.clearCacheForResource(resource);
        }
    }, {
        key: "info",
        value: function info(message) {
            this.adal.info(message);
        }
    }, {
        key: "verbose",
        value: function verbose(message) {
            this.adal.verbose(message);
        }
    }, {
        key: "isAuthenticated",
        value: function isAuthenticated() {
            return this.oauthData.isAuthenticated;
        }
    }]);

    return AureliaAdalManager;
})();
AureliaAdalManager = __decorate([aurelia_framework_1.inject(Adal), __metadata('design:paramtypes', [Object])], AureliaAdalManager);
exports.AureliaAdalManager = AureliaAdalManager;
//# sourceMappingURL=data:application/json;base64,
