var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, Promise, generator) {
    return new Promise(function (resolve, reject) {
        generator = generator.call(thisArg, _arguments);
        function cast(value) { return value instanceof Promise && value.constructor === Promise ? value : new Promise(function (resolve) { resolve(value); }); }
        function onfulfill(value) { try { step("next", value); } catch (e) { reject(e); } }
        function onreject(value) { try { step("throw", value); } catch (e) { reject(e); } }
        function step(verb, value) {
            var result = generator[verb](value);
            result.done ? resolve(result.value) : cast(result.value).then(onfulfill, onreject);
        }
        step("next", void 0);
    });
};
import { inject } from 'aurelia-framework';
import * as Adal from 'adal';
export let AureliaAdalManager = class {
    constructor(adalConstructor) {
        this.adalConstructor = adalConstructor;
        this.oauthData = {
            isAuthenticated: false,
            userName: '',
            loginError: '',
            profile: null
        };
    }
    configure(config) {
        try {
            let configOptions = {};
            configOptions.tenant = config.tenant;
            configOptions.clientId = config.clientId;
            configOptions.endpoints = config.endpoints;
            let existingHash = window.location.hash;
            let pathDefault = window.location.href;
            if (existingHash) {
                pathDefault = pathDefault.replace(existingHash, '');
            }
            configOptions.redirectUri = configOptions.redirectUri || pathDefault;
            configOptions.postLogoutRedirectUri = configOptions.postLogoutRedirectUri || pathDefault;
            this.adal = this.adalConstructor.inject(configOptions);
            window.AuthenticationContext = () => {
                return this.adal;
            };
            this.updateDataFromCache(this.adal.config.loginResource);
        }
        catch (e) {
            console.log(e);
        }
    }
    updateDataFromCache(resource) {
        var token = this.adal.getCachedToken(resource);
        this.oauthData.isAuthenticated = token !== null && token.length > 0;
        var user = this.adal.getCachedUser() || { userName: '', profile: null };
        this.oauthData.userName = user.userName;
        this.oauthData.profile = user.profile;
        this.oauthData.loginError = this.adal.getLoginError();
    }
    hashHandler(hash, redirectHandler, isNotCallbackHandler, nextHandler) {
        if (this.adal.isCallback(hash)) {
            let requestInfo = this.adal.getRequestInfo(hash);
            this.adal.saveTokenFromHash(requestInfo);
            if (requestInfo.requestType !== this.adal.REQUEST_TYPE.LOGIN) {
                this.adal.callback = window.parent.AuthenticationContext().callback;
                if (requestInfo.requestType === this.adal.REQUEST_TYPE.RENEW_TOKEN) {
                    this.adal.callback = window.parent.callBackMappedToRenewStates[requestInfo.stateResponse];
                }
            }
            if (requestInfo.stateMatch) {
                if (typeof this.adal.callback === 'function') {
                    if (requestInfo.requestType === this.adal.REQUEST_TYPE.RENEW_TOKEN) {
                        if (requestInfo.parameters['access_token']) {
                            this.adal.callback(this.adal._getItem(this.adal.CONSTANTS.STORAGE.ERROR_DESCRIPTION), requestInfo.parameters['access_token']);
                            return nextHandler();
                        }
                        else if (requestInfo.parameters['id_token']) {
                            this.adal.callback(this.adal._getItem(this.adal.CONSTANTS.STORAGE.ERROR_DESCRIPTION), requestInfo.parameters['id_token']);
                            return nextHandler();
                        }
                    }
                }
                else {
                    this.updateDataFromCache(this.adal.config.loginResource);
                    if (this.oauthData.userName) {
                        let self = this;
                        self.updateDataFromCache(self.adal.config.loginResource);
                        var loginStartPage = self.adal._getItem(self.adal.CONSTANTS.STORAGE.START_PAGE);
                        if (loginStartPage) {
                            return redirectHandler(loginStartPage);
                        }
                    }
                    else {
                    }
                }
            }
        }
        else {
            return isNotCallbackHandler();
        }
    }
    loginHandler(path, redirectHandler, handler) {
        this.adal.info('Login event for:' + path);
        if (this.adal.config && this.adal.config.localLoginUrl) {
            return redirectHandler(this.adal.config.localLoginUrl);
        }
        else {
            this.adal._saveItem(this.adal.CONSTANTS.STORAGE.START_PAGE, path);
            this.adal.info('Start login at:' + window.location.href);
            this.adal.login();
            return handler();
        }
    }
    config() {
        return this.adal.config;
    }
    login() {
        this.adal.login();
    }
    loginInProgress() {
        return this.adal.loginInProgress();
    }
    logOut() {
        this.adal.logOut();
    }
    getCachedToken(resource) {
        return this.adal.getCachedToken(resource);
    }
    getUserInfo() {
        return this.oauthData;
    }
    acquireToken(resource) {
        return new Promise((resolve, reject) => {
            this.adal.acquireToken(resource, (error, tokenOut) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(tokenOut);
                }
            });
        });
    }
    getUser() {
        return __awaiter(this, void 0, Promise, function* () {
            return yield new Promise((resolve, reject) => {
                this.adal.getUser((error, user) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(user);
                    }
                });
            });
        });
    }
    getResourceForEndpoint(endpoint) {
        return this.adal.getResourceForEndpoint(endpoint);
    }
    clearCache() {
        this.adal.clearCache();
    }
    clearCacheForResource(resource) {
        this.adal.clearCacheForResource(resource);
    }
    info(message) {
        this.adal.info(message);
    }
    verbose(message) {
        this.adal.verbose(message);
    }
    isAuthenticated() {
        return this.oauthData.isAuthenticated;
    }
};
AureliaAdalManager = __decorate([
    inject(Adal), 
    __metadata('design:paramtypes', [Object])
], AureliaAdalManager);

//# sourceMappingURL=data:application/json;base64,
